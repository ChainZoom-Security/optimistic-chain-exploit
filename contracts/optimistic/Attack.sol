pragma solidity ^0.5.3;

import "./ProxyFactory.sol";

interface IOPToken {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

contract Attack {
    ProxyFactory private _factory;
    address private _owner;
    IOPToken private _token;

    constructor(address factory, address token) public {
        _factory = ProxyFactory(factory);
        _owner = msg.sender;
        _token = IOPToken(token);
    }
}
