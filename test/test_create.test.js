const hardhat = require('hardhat');
const { ethers } = hardhat;
const { expect } = require('chai');
const rlp = require('rlp');
const keccak = require('keccak');

describe('Test create', async () => {
  let deployer;
  let factory;

  beforeEach(async () => {
    [deployer] = await ethers.getSigners();

    let Factory = await ethers.getContractFactory('Factory');
    factory = await Factory.connect(deployer).deploy();

    console.log('Factory address: ' + factory.address.toLowerCase());
  });

  it('Check', async () => {
    // nonce = 1
    await factory.connect(deployer).createInstance();
    var nonce = 0x01; //The nonce must be a hex literal!
    var input_arr = [factory.address, nonce];
    var rlp_encoded = rlp.encode(input_arr);
    var contract_address_long = keccak('keccak256').update(Buffer.from(rlp_encoded)).digest('hex');
    var contract_address = '0x' + contract_address_long.substring(24); //Trim the first 24 characters.
    console.log('Instance contract_address with nonce 1: ' + contract_address);
    expect((await factory.nonceToAddress(1)).toLowerCase()).be.equal(contract_address);

    // nonce = 2
    await factory.connect(deployer).createInstance();
    var nonce = 0x02;
    var input_arr = [factory.address, nonce];
    var rlp_encoded = rlp.encode(input_arr);
    var contract_address_long = keccak('keccak256').update(Buffer.from(rlp_encoded)).digest('hex');
    var contract_address = '0x' + contract_address_long.substring(24);
    console.log('Instance contract_address with nonce 2: ' + contract_address);
    expect((await factory.nonceToAddress(2)).toLowerCase()).be.equal(contract_address);

    // nonce = 3
    await factory.connect(deployer).createInstance();
    var nonce = 0x03;
    var input_arr = [factory.address, nonce];
    var rlp_encoded = rlp.encode(input_arr);
    var contract_address_long = keccak('keccak256').update(Buffer.from(rlp_encoded)).digest('hex');
    var contract_address = '0x' + contract_address_long.substring(24);
    console.log('Instance contract_address with nonce 3: ' + contract_address);
    expect((await factory.nonceToAddress(3)).toLowerCase()).be.equal(contract_address);
  });
});
